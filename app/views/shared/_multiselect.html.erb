<%
  # optionally accept an array for attribute for deep nested attributes
  # make it into a string with square brackets and one with underscores
  attribute_array_string = '[' + [*attribute].join('][') + ']'
  attribute_string = [*attribute].join('_')

  if !defined? element_options
    element_options = {class: "#{attribute_string}-option"}
  else
    element_options[:class] = [element_options[:class], "#{attribute_string}-option"].join ' '
  end
  if defined? element_class
    element_options[:class] = [element_options[:class], element_class].join ' '
  end
  # if we're not told how to get the id use the :id method
  id ||= :id
  # if someone has put an id into the element options
  # we don't want to use it - we set our own element id here.
  element_options.delete :id
  element_options.delete "id"
%>
<a class='dropdown-button btn-flat' href='#' data-activates='<%= object %>-<%= attribute_string %>-dropdown' data-hover="true">
<i class="material-icons left"><%= icon %></i>
<%= text %></a>
<div id='<%= object %>-<%= attribute_string %>-dropdown' class='dropdown-content'>
  
  <% collection.each do |item| %>
    <div 
        <%= element_options.map{ |key, value| "#{key.to_s}=\"#{value.to_s}\"" }.join(' ').html_safe %>
        id="<%= object %>-<%= attribute_string %>-<%= item.send(id).to_s %>"
        <% if local_assigns[:data].presence %>
          data="<%= item.send(data) %>"
        <% end %>
    >
      <%= check_box_tag("#{object}#{attribute_array_string}[#{item.send(id).to_s}]", item.send(id).to_s, selected.include?(item) || selected.include?(item.send(id)), local_assigns[:check_box_options].presence ? check_box_options : {}) %>
      <%= label_tag("#{object}#{attribute_array_string}[#{item.send(id).to_s}]", item.send(display)) %>
    </div>
  <% end %>
  
</div>