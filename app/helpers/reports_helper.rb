module ReportsHelper

  class Report::ActiveRecord_Relation
  	# group bunch of reports according to whether each of the collections
  	# generated by the reports intersects with a given collection
  	def group_by_collection (intersection_list, &get_list)
  	  grouped = Hash.new
  	  self.each do |report|
  	  	(get_list.call(report) & intersection_list).each do |element|
  	  		grouped[element] ? grouped[element] << report : grouped[element] = [report]
  	  	end
  	  end
  	  return grouped
  	end
  end


  # Assign a colour to each report type
  def report_colour
  	{
  		'planning' => 'light-blue lighten-3',
  		'challenge' => 'light-green lighten-3',
  		'impact' => 'orange lighten-3'
  	}
  end

  # Assign a name to each report type
  def report_type_text
  	{
  		'hope' => 'Hope or Dream',
  		'challenge' => 'Challenge',
  		'impact' => 'Impact'
  	}
  end

	def new_child_fields_template(form_builder, association, options = {})
		options[:object] ||= form_builder.object.class.reflect_on_association(association).klass.new
		options[:partial] ||= "#{association.to_s.singularize}_fields"
		options[:form_builder_local] ||= :f

		content_tag(:div, :id => "#{association}_fields_template", :style => "display: none") do
			form_builder.fields_for(association, options[:object], :child_index => '00000') do |f|
				render(:partial => options[:partial], :locals => {options[:form_builder_local] => f})
			end
		end
	end

end
