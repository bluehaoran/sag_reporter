module ReportsHelper

  class Report::ActiveRecord_Relation
  	# group bunch of reports according to whether each of the collections
  	# generated by the reports intersects with a given collection
  	def group_by_collection (intersection_list, &get_list)
  	  grouped = Hash.new
  	  self.each do |report|
  	  	(get_list.call(report) & intersection_list).each do |element|
  	  		grouped[element] ? grouped[element] << report : grouped[element] = [report]
  	  	end
  	  end
  	  return grouped
  	end
  end


  # Assign a colour to each report type
  def report_colour
  	{
  		'planning' => 'light-blue lighten-3',
  		'challenge' => 'light-green lighten-3',
  		'impact' => 'orange lighten-3'
  	}
  end

  # Assign a name to each report type
  def report_type_text
  	{
  		'hope' => 'Hope or Dream',
  		'challenge' => 'Challenge',
  		'impact' => 'Impact'
  	}
  end
  
  
  # Redirects to recent view (or to the default).
  def redirect_recent_or(default)
    redirect_to(session[:report_recent_view] || default)
    session.delete(:report_recent_view)
  end

  # Store which is the recent view in the session
  def recent_view
    session[:report_recent_view] = request.url if request.get?
  end

end
